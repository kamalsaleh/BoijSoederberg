
#################################
##
## Representations
##
#################################

DeclareRepresentation( "IsRootSequenceOfBettiDiagramRep",
                       IsRootSequenceOfBettiDiagram and IsAttributeStoringRep,
                       [ "StrictlyIncreasingIntegerSequence" ] );

DeclareRepresentation( "IsUpperEquationOfFacetRep",
                       IsUpperEquationOfFacet and IsAttributeStoringRep,
                       [ "MatrixWithCoefficientsOfTheUpperEquation", "Grades" ] );

DeclareRepresentation( "IsLowerEquationOfFacetRep",
                       IsLowerEquationOfFacet and IsAttributeStoringRep,
                       [ "MatrixWithCoefficientsOfTheLowerEquation", "Grades" ] );


##################################
##
## Family and Type
##
##################################
BindGlobal( "TheBoijSoederbergFamily",
  NewFamily( "TheBoijSoederbergFamily", IsObject ) );

BindGlobal( "TheTypeRootSequenceOfBettiDiagram",
  NewType( TheBoijSoederbergFamily,
                     IsRootSequenceOfBettiDiagramRep ) );

BindGlobal( "TheTypeUpperEquationOfFacet",
  NewType( TheBoijSoederbergFamily,
                     IsUpperEquationOfFacet ) );

BindGlobal( "TheTypeLowerEquationOfFacet",
  NewType( TheBoijSoederbergFamily,
                     IsLowerEquationOfFacet ) );











InstallGlobalFunction(GreatestCommonDivisor,
function( a, b)
while (a<>b) do
if a>b then a:=a-b;fi;
if b>a then b:=b-a;fi;
od;
return a; 
end);

InstallGlobalFunction(IsThisNumberPrime,
function(a)
local i,j;
j:=0;
for i in [2..a-1] do
if a mod i=0 then j:=1;fi;
od;
if a=1 then j:=1;fi;
if j=0 then return true;else return false; fi;
end);

InstallGlobalFunction(Factor,
function(n)
local i,s;
s:=1;
for i in [2..n] do
s:=s*i;
od;
return s;
end);


InstallGlobalFunction(PrintAllPrimeNumbersLessThan,
function(a)
local i,j;
j:=0;
for i in [3..a] do
if IsThisNumberPrime(i)=true then j:=j+1; fi;
od;
Print("the number of primes is =",j,"\n");
for i in [3..a] do
if IsThisNumberPrime(i)=true then Print(i,","); fi;
od;
return;
end);




##
InstallMethod( LowestBoundOfMatrix,
               [ IsMatrix],
               
  function( matrix )
    local i,j, list_of_rows;
    
    if Length( matrix ) = 0 or Length( matrix[ 1 ] ) = 0 then
        
        return [ ];
        
    fi;
    
    list_of_rows := [];
    
    for j in [ 1 .. Length( matrix[ 1 ] ) ] do
        
        for i in [ 1 .. Length( matrix ) ] do
            
            if not matrix[ i ][ j ] = 0 then
                
                Add( list_of_rows, j+i-2 );
                
                break;
                
            fi;
            
        od;
        
    od;
    
    return list_of_rows;
    
end );

##
InstallGlobalFunction( NumberOfDigitsOfTheNumber,
     function(a)
return Length( String( a ) );
end);
##


InstallGlobalFunction(Lcmm,
     function(a,b)
      return a*b/GreatestCommonDivisor(a,b);
end);

##
InstallMethod(FirstNoneZeroElementInTheMatrix,
                       [IsMatrix],
      function(matrix)
      
      local i,j,b,t;
      
      b:=0;t:=0;
      for i in [1..Length(matrix)] do 
          
          for j in [1..Length(matrix[1])] do
            
             if not matrix[i][j]=0 then b:=matrix[i][j];t:=1;break;fi;
            
          od;
        
       if t=1 then break;fi;
        
       od;
return b;
end);

##
InstallMethod(GreatestCommonDivisorOfMatrix,
                      [IsMatrix],
            
      function(matrix)
      local i,j,b;
      b:= FirstNoneZeroElementInTheMatrix(matrix);
      for i in [1..Length(matrix)] do
       
         for j in [1..Length(matrix[1])] do 
         
           if not matrix[i][j]=0 then b:=GreatestCommonDivisor(b,matrix[i][j]);fi;
           
         od;
        
      od;
return b;
end);
         
##
InstallMethod(LowestCommonMultipleOfTheList,
                      [IsList],
                    
     function(list)
      
     local i,x;
      
      x:=list[1];
        
      for i in [2..Length(list)] do
          
           x:=Lcmm(x,list[i]);
      od;
          
      return x;
end);

##
InstallMethod( MaximumOfTheMatrix,
               [IsMatrix],
                
   function( matrix)
      local i,j, max;
      
      max:=matrix[1][1];
       
      for i in [1..Length(matrix)] do
         
         for j in [1..Length(matrix[1])] do 
          
            if max<matrix[i][j] then max:=matrix[i][j];fi;
            
         od;
        
      od;
      
    return max;
end);
##
InstallMethod( MinimumOfTheMatrix,
               [IsMatrix],
                
   function( matrix)
      local i,j, min;
      
      min:=matrix[1][1];
       
      for i in [1..Length(matrix)] do
         
         for j in [1..Length(matrix[1])] do 
          
            if min>matrix[i][j] then min:=matrix[i][j];fi;
            
         od;
        
      od;
      
    return min;
end);


##
InstallMethod( PrintTheMatrix,
               [ IsMatrix ],
               
  function( matrix )
    local i,j,m,t;

     m:=1;
    for  i in [1..Length(matrix)] do
    
      for  j in [1..Length(matrix[1])] do
    
      if m<NumberOfDigitsOfTheNumber(matrix[i][j]) then m:=NumberOfDigitsOfTheNumber(matrix[i][j]);fi;
      
      od;
    od;

    Print(" _ ");

     for i in [1..Length(matrix[1])*(m+2)-2] do

         Print(" ");
     od;
    Print(" _","\n");
 
    for i in [1..Length(matrix)-1] do
        
        Print("|  ");
      
        for j in [1..Length(matrix[1])] do
             
              Print(matrix[i][j]);
                 
                  for t in [1..m+2-NumberOfDigitsOfTheNumber(matrix[i][j])] do
              
                     Print(" ");
                    
                  od;
            
         od;
       
        Print("|","\n");
     od;
      
    Print("|_ ");
     
      for j in [1..Length(matrix[1])-1] do
                  Print(matrix[Length(matrix)][j]);   

                 
                  for t in [1..m+2-NumberOfDigitsOfTheNumber(matrix[Length(matrix)][j])] do
              
                     Print(" ");
                    
                  od;

      od;
   Print(matrix[Length(matrix)][Length(matrix[1])]);
  for i in [1..m-NumberOfDigitsOfTheNumber(matrix[Length(matrix)][Length(matrix[1])])] do
  Print(" ");
  od;
  Print(" _|","\n");


 
end);

##
InstallMethod(IsIncreasingSequence,
              [IsList],
         function(list)
         local i,u;
         
         u:= true;
          
         for i in [1..Length(list)-1] do 
          
             if list[i]>list[i+1] then u:=false;fi;
         
         od;
        
         return u;
end);
 






InstallMethod( PureBettiTableAsMatrix,
               [ IsList ],
               
  function( list )
    local i,j,e,elist,clist,mat,m;
     
     if (IsIncreasingSequence(list)=false) then Error("The sequence should be increased"); else
     elist:=[];clist:=[];
      
    for i in [1..Length(list)] do
     
        e:=1;
     
        for j in [1..Length(list)] do
            
            if (j<>i) then e:=e*(list[j]-list[i]);fi;
           
        od;
          
        if ( e < 0 ) then e:=-1*e;fi;
        
        Add( elist,e);
        
    od;
    
    for i in [1..Length(list)] do
      
        Add(clist,LowestCommonMultipleOfTheList(elist)/elist[i]);
        
    od;
    
   m:=list[Length(list)]-Length(list)-list[1]+2;
    
   mat:= List([1..m],i->List([1..Length(list)],j->0));
    
   for i in [1..Length(list)] do
      
      mat[list[i]-i-list[1]+2][i]:=clist[i];
     
   od;
return mat;
fi;
end);
## this is just for printing pure betti tables 
InstallMethod( PrintThePureMatrixAsBettiTable,
               [ IsMatrix,IsInt ],
              

function(mat,n)
local m,i,t,j,v;
    m:=NumberOfDigitsOfTheNumber( MaximumOfTheMatrix(mat));

    v:=Maximum(NumberOfDigitsOfTheNumber(n+Length(mat)),NumberOfDigitsOfTheNumber(n));
    for i in [1..v+1] do
        
          Print(" ");
         
    od;
      
     for i in [1..Length(mat[1])] do
        
        Print(i-1);
        
        for t in [1..m+3-NumberOfDigitsOfTheNumber(i)] do
           
           Print(" ");
           
        od;
        
     od;
      
      Print("\n");
      
      for i in [1..NumberOfDigitsOfTheNumber(n+Length(mat))-1] do
          
           Print(" ");
          
      od;
       
     for i in [1..(m+3)*Length(mat[1])] do
        
        Print("-");
        
     od;
      
      Print("\n");
      
     for i in [1..Length(mat)] do
          
           for t in [1..v-NumberOfDigitsOfTheNumber(n+i-1)] do
               
               Print(" ");
              
           od;
            
           Print(n+i-1,"|");
           ##if(NumberOfDigitsOfTheNumber(n+i-1)=1) then Print(n+i-1," |");fi;
           
           ##if(NumberOfDigitsOfTheNumber(n+i-1)=2) then Print(n+i-1,"|");fi;
            
           for j in [1..Length(mat[1])] do
                  
                  if (mat[i][j]=0) then Print(".");else Print(mat[i][j]);fi;
                  
                  for t in [1..m+3-NumberOfDigitsOfTheNumber(mat[i][j])] do
                     
                     Print(" ");
                     
                  od;
                
           od;
        
     Print("\n");
     
      od;
     
end);

##
InstallMethod( PureBettiTable,
               [ IsList],
              

    function(list)
      
      if (IsIncreasingSequence(list)=false) then Error("The sequence should be increased"); else 
      PrintThePureMatrixAsBettiTable(PureBettiTableAsMatrix(list),list[1]);fi;
end);


##
InstallMethod( PureTheGreatestNumber,
               [ IsMatrix],
              

    function(mat)
   local b,i,j,e;
   
    b:=PureBettiTableAsMatrix(LowestBoundOfMatrix(mat));
     
    e:= mat[1][1]/b[1][1];j:=1;
    for i in LowestBoundOfMatrix(mat) do
        
        if(e>mat[i-j+2][j]/b[i-j+2][j]) then e:=mat[i-j+2][j]/b[i-j+2][j];fi;
          
         j:=j+1;
        
    od;
    return e;
end);

InstallMethod( MatrixAfterSubstruction,
               [ IsMatrix],
              

    function(mat)
    
    local b,c,i,j;
        
     b:=PureBettiTableAsMatrix(LowestBoundOfMatrix(mat));
      
     c:=List([1..Length(mat)],i->List([1..Length(mat[1])],j->0));
     
     for i in [1..Length(b)] do
      
        for j in [1..Length(b[1])] do
           
           c[i][j]:=b[i][j];
           
        od;
       
     od;
     
     c:=mat-PureTheGreatestNumber(mat)*c;
      return c;
end);

InstallMethod(DecomposeTheBettiTable,
              [ IsBettiDiagram],
            
       function(b)
       local a;
          
          a:=b!.matrix;
          Print("The Betti table can be decomposed as :");
          while (IsZero(a)=false) do 
          
          Print("(",PureTheGreatestNumber(a),").Pi");
          
          Print(LowestBoundOfMatrix(a));
          
          a:=MatrixAfterSubstruction(a);

          if IsZero(a)=false then Print(" + ");fi;
          od;
end);


InstallMethod(DecomposeTheBettiTableX,
              [ IsBettiDiagram],
            
       function(b)
       local a,l;
          
          a:=b!.matrix;
          l:=[];
          while (IsZero(a)=false) do 

          Add(l,[PureTheGreatestNumber(a),LowestBoundOfMatrix(a)]);
          
          a:=MatrixAfterSubstruction(a);

          od;
          return l;
end);



InstallMethod(AddLinesToPureBettiTable,
              [IsList,IsInt,IsInt],
           
              function(list,m,n)
              
              local i,x,mat;
              
              mat:=PureBettiTableAsMatrix(list);
              
              x:=List([1..n-m+1],i->List([1..Length(mat[1])],j->0));
              
             for i in [1..Length(list)] do
      
             x[list[i]-i-list[1]+2+list[1]-m][i]:=mat[list[i]-i-list[1]+2][i];
              
             od;

              PrintThePureMatrixAsBettiTable(x,m);
#return x;
end);

InstallMethod(TheUpperEquationOfTheFacet,
              [IsList,IsInt,IsInt,IsInt],
           
              function(list,r,m,n)
              
              local i,x,mat,t,s,k,y;
              
              list[r+2]:=list[r+2]-1;
              
              mat:=PureBettiTableAsMatrix(list);
              
              x:=List([1..n-m+1],i->List([1..Length(mat[1])],j->0));
              
              y:=GreatestCommonDivisor(mat[list[r+1]-r-1-list[1]+2][r+1],mat[list[r+2]-r-2-list[1]+2][r+2]);
              
              x[list[r+2]-r-m][r+2]:=-mat[list[r+1]-r-1-list[1]+2][r+1]/y;
               
              x[list[r+1]-r+1-m][r+1]:=mat[list[r+2]-r-2-list[1]+2][r+2]/y;
              
              while(list<>[m..m+Length(list)-1]) do
              t:=FindLess(list);
              
              list[t]:=list[t]-1;
              
             mat:=PureBettiTableAsMatrix(list);
              
             s:=0;
             
             for i in [1..Length(list)] do
              
              if (i<>t) then s:=s+x[list[i]-i-list[1]+2+list[1]-m][i]*mat[list[i]-i-list[1]+2][i];fi;
              
             od;
              
             x[list[t]-t-list[1]+2+list[1]-m][t]:=-s/mat[list[t]-t-list[1]+2][t];
              
             od;
              
            ##PrintThePureMatrixAsBettiTable(x,m);
return UpperEquationOfFacet(x, m);
end);

##
InstallMethod(FindLess,
              [IsList],
      function(list)
      local j,v;
      
      v:=1;j:=Length(list);
      
      while(v=1) do
      
      if(list[j]>list[j-1]+1) then return j;break;fi;
           
           j:=j-1;
           
      if(j=1) then break;fi;
       
      od;
      
      return j;
end);

##
InstallMethod(FindMore,
              [IsList],
      function(list)
      local j,v;
      
      v:=1;j:=1;
      
      while(v=1) do
      
      if(list[j]<list[j+1]-1) then return j;break;fi;
       
      j:=j+1;
      
      if(j=Length(list)) then break;fi;
      
      od;
      
      return j;
end);

InstallMethod(TheLowerEquationOfTheFacet,
              [IsList,IsInt,IsInt,IsInt],
           
              function(list,r,m,n)
              
              local i,x,mat,t,s,k,y;
              
              list[r+1]:=list[r+1]+1;
              
              mat:=PureBettiTableAsMatrix(list);
              
              x:=List([1..n-m+1],i->List([1..Length(mat[1])],j->0));
              
               y:=GreatestCommonDivisor(mat[list[r+1]-r-1-list[1]+2][r+1],mat[list[r+2]-r-2-list[1]+2][r+2]);
              
              x[list[r+2]-r-m][r+2]:=-mat[list[r+1]-r-1-list[1]+2][r+1]/y;
               
              x[list[r+1]-r+1-m][r+1]:=mat[list[r+2]-r-2-list[1]+2][r+2]/y;
              
              while(list<>[n..n+Length(list)-1]) do
              t:=FindMore(list);
              
              list[t]:=list[t]+1;
              
             mat:=PureBettiTableAsMatrix(list);
              
             s:=0;
             
             for i in [1..Length(list)] do
              
              if (i<>t) then s:=s+x[list[i]-i-list[1]+2+list[1]-m][i]*mat[list[i]-i-list[1]+2][i];fi;
              
             od;
              
             x[list[t]-t-list[1]+2+list[1]-m][t]:=-s/mat[list[t]-t-list[1]+2][t];
              
             od;
              
             ## maybe m should be changed
return LowerEquationOfFacet(x, m);
end);


InstallGlobalFunction(PureBettiTableX,
  function( list )
    local matrix, min, row_range, col_range;
    
    matrix := PureBettiTableAsMatrix(list);
    
    min := list[1];
    
    row_range := [ min .. min + Length( matrix ) - 1 ];
    
    col_range := [ 0 .. Length( matrix[1] ) - 1 ];

    return HomalgBettiDiagram( matrix, row_range, col_range, rec( string := "" ) );
    
end );


InstallMethod(FunctionOfThePureCohomolgyTable,
              [IsList,IsInt, IsInt],

  function(list,i,j)
    local v,k;

    v:=1;
    
    for k in list do
    
    v:= v*( j-k );
    
    od;
     
    if ( v<0 ) then v:=-v;fi;

    if (i=0) then if (j>list[1]) then return v; else return 0; fi;fi;
    if (i=Length(list)) then if ( j<list[Length(list)] ) then return v; else return 0; fi;fi;
    if (0<i and i<Length(list)) then if ( list[i]>j and j>list[i+1] ) then return v; else return 0; fi;fi;
    if (i<0 or i>Length(list)) then return 0;fi;

end );

    
InstallMethod(CohomologyTally,
              [IsList,IsInt,IsInt],

   function (list,u,v)
       local 
        w,m,i,j,y,z;
        m:= Length(list)+1;
        w:= List([1..m],i->List([1..v-u+1],j->0));
        for j in [1..m] do
           for i in [1..v-u+1] do
             y:=m-j;z:=-m+j+i+u-1;
           w[j][i]:=FunctionOfThePureCohomolgyTable(list,y,z);
           #Print(m-j,",",-m+j+i+u-1,"   ");
           od;
         #Print("\n");
        od;  
        return w/GreatestCommonDivisorOfMatrix(w);
   end );
##
## this is just for printing pure CohomologyTally
InstallMethod( PrintThePureMatrixAsCohomologyTally,
               [ IsMatrix,IsInt ],
              

function(mat,n)
local m,i,t,j,v;
    m:=NumberOfDigitsOfTheNumber( MaximumOfTheMatrix(mat));

    v:=NumberOfDigitsOfTheNumber(Length(mat)-1);
    for i in [1..v+1] do
        
          Print(" ");
         
    od;
      
     for i in [1..Length(mat[1])] do
        
        Print(n+i-1);
        
        for t in [1..m+3-NumberOfDigitsOfTheNumber(n+i-1)] do
           
           Print(" ");
           
        od;
        
     od;
      
      Print("\n");
      
      for i in [1..v] do
          
           Print(" ");
          
      od;
       
     for i in [1..(m+3)*Length(mat[1])] do
        
        Print("-");
        
     od;
      
      Print("\n");
      
     for i in [1..Length(mat)] do
          
           for t in [1..v-NumberOfDigitsOfTheNumber(Length(mat)-i)] do
               
               Print(" ");
              
           od;
            
           Print(Length(mat)-i,"|");
           ##if(NumberOfDigitsOfTheNumber(n+i-1)=1) then Print(n+i-1," |");fi;
           
           ##if(NumberOfDigitsOfTheNumber(n+i-1)=2) then Print(n+i-1,"|");fi;
            
           for j in [1..Length(mat[1])] do
                  
                  if (mat[i][j]=0) then Print(".");else Print(mat[i][j]);fi;
                  
                  for t in [1..m+3-NumberOfDigitsOfTheNumber(mat[i][j])] do
                     
                     Print(" ");
                     
                  od;
                
           od;
        
     Print("\n");
     
      od;
     
end);

InstallMethod( Pr,
               [ IsList,IsInt,IsInt ],
              

function(list,i,k)
local j,s;
s:=0;
for j in [0..i] do 
s:=s+FunctionOfThePureCohomolgyTable(list,j,-k)*(-1)^(i-j);
od;
return s;
end);

##
InstallMethod(Pe,
              [IsList,IsInt,IsInt,IsInt,IsInt],

function(list,t,c,i,l)
local j,s;
s:=0;
if (i<t) then 
for j in [0..i] do 
s:=s+FunctionOfThePureCohomolgyTable(list,j,-i-l)*(-1)^(i-j);
od;fi;

if (i=t or i=t+1)and(l<c-t or l=c-t) then 
for j in [0..t] do
s:=s+FunctionOfThePureCohomolgyTable(list,j,-i-l)*(-1)^(i-j);
od;fi;

if (t=i or i=t+1)and(l>c-t) then 
for j in [0..t-1] do
s:=s+FunctionOfThePureCohomolgyTable(list,j,-i-l)*(-1)^(i-j);
od;fi;

if (t+1<i) then 
for j in [0..i-2] do
s:=s+FunctionOfThePureCohomolgyTable(list,j,-i-l)*(-1)^(i-j);
od;fi;

return s;
end);




InstallMethod(AddToXX,
              [IsList,IsInt],
     function(list,n)
     local i,v,list2;
      list2:=List([1..Length(list)+1],i->0);
      v:=0;
     for i in list do 
     if n=i then v:=1;fi;
     od;
     if v=1 then return list;
     else 
         for i in [1..Length(list)] do
         list2[i]:=list[i];
         od;
         list2[Length(list)+1]:=n;return list2;fi;
    end);

         
InstallMethod (Qru,
                      [IsInt,IsInt],
           function(x,p)
           local  i,u;
            u:=List([1..2],j->0);
            for i in [1..p] do
            if (i*i mod p =x) then u[1]:=1;u[2]:=i;break;fi;od;
            return u;
            end);



##############################################
##
##  Constructors
##
##############################################

# this programs extend the matrix by adding empty lines in the top and below it, used to find the sum of two betti diagrams
InstallMethod(AddEmptyLinesToTheMatrix,
               [IsMatrix,IsInt,IsInt], 
function(matrix,a,b)
local newmatrix,i;

newmatrix:= List([1..Length(matrix)+a+b],i->List([1..Length(matrix[1])],j->0));

for i in [1..Length(matrix)] do 

        newmatrix[i+a]:= matrix[i];
od;
return newmatrix;

end );

# this programs extend the matrix by adding n empty columns to the right of the matrix, used to find the sum of two betti diagrams
InstallMethod(AddEmptyColumnsToTheMatrix,
               [IsMatrix, IsInt],

function(matrix, n)

return TransposedMat( AddEmptyLinesToTheMatrix( TransposedMat(matrix) , 0 , n )  );
end );


InstallGlobalFunction( RootSequenceOfBettiDiagram,
  function( arg )
    local  list, integer_sequence, root_sequence;

     list:= arg[1];    
     if not IsList( list ) then

      Error( "the argument must be a list\n" );

    fi;

    if false in List( list, IsInt ) then

      Error( "the list must only contain integers\n" );

    fi;

    integer_sequence := Set( list ) ;
    
    root_sequence := rec( StrictlyIncreasingIntegerSequence := integer_sequence );

    ObjectifyWithAttributes( root_sequence, TheTypeRootSequenceOfBettiDiagram
                           );
    
    return root_sequence;

end );

InstallGlobalFunction( UpperEquationOfFacet,
  function (arg)
    local equation;
    
    if not IsMatrix(arg[1]) then Error( "The first argument should be a matrix " ); fi;

    if not IsInt(arg[2]) then Error( "The second argument should be Integer " ); fi;

    if not Length(arg)=2 then Error( "The number of argument should be 2, the first is matrix and the second is integer "); fi;

    equation:= rec( MatrixWithCoefficientsOfTheUpperEquation:= arg[1], Grades:= arg[2]
                          );
  ObjectifyWithAttributes( equation, TheTypeUpperEquationOfFacet
                         );

return equation;
end );

InstallGlobalFunction( LowerEquationOfFacet,
  function (arg)
    local equation;
    
    if not IsMatrix(arg[1]) then Error( "The first argument should be a matrix " ); fi;

    if not IsInt(arg[2]) then Error( "The second argument should be Integer " ); fi;

    if not Length(arg)=2 then Error( "The number of argument should be 2, the first is matrix and the second is integer "); fi;

    equation:= rec( MatrixWithCoefficientsOfTheLowerEquation:= arg[1], Grades:= arg[2]
                          );
  ObjectifyWithAttributes( equation, TheTypeLowerEquationOfFacet
                         );

return equation;
end );

############################################
##
##  Display and View
##
############################################


InstallMethod( Display,
               "for a root sequence of betti diagram",
               [ IsRootSequenceOfBettiDiagramRep ],
               
  function( root_sequence )

    Print( root_sequence!.StrictlyIncreasingIntegerSequence );

end );

InstallMethod( ViewObj,
               "for a root sequence of betti diagram",
               [ IsRootSequenceOfBettiDiagramRep ],
               
  function( root_sequence )

    Print( "< rootSequenceOfBettiTable >" );

end );

InstallMethod( Display,
               "for the Upper Equation Of Facet",
              [IsUpperEquationOfFacet],
  function( equation )

PrintThePureMatrixAsBettiTable(equation!.MatrixWithCoefficientsOfTheUpperEquation, equation!.Grades);
  end );


InstallMethod( Display,
               "for the Lower Equation Of Facet",
              [IsLowerEquationOfFacet],
  function( equation )

PrintThePureMatrixAsBettiTable(equation!.MatrixWithCoefficientsOfTheLowerEquation, equation!.Grades);
  end );

InstallMethod( ViewObj,
               "for the Upper Equation Of Facet",
              [IsUpperEquationOfFacet],
  function( equation )
  Print("<Upper equation Of a facet>");
  end );


InstallMethod( ViewObj,
               "for the Lower Equation Of Facet",
              [IsLowerEquationOfFacet],
  function( equation )
  Print("<Lower equation Of a facet>");
  end );

####################################
#
#   Operations
#
####################################

# this program return the sum of two Betti diagrams 
InstallMethod(\+,
              [IsBettiDiagram,IsBettiDiagram],
function(A,B)
local A1,B1,C1,col_range1, row_range1,col_range2,row_range2,col_range3, row_range3, min, max;

A1:= A!.matrix; B1:= B!.matrix;

row_range1:= A!.row_range;
row_range2:= B!.row_range;

col_range1:= A!.column_range;
col_range2:= B!.column_range;

if Length(col_range1)> Length(col_range2)  then B1:= AddEmptyColumnsToTheMatrix(B1, Length(col_range1)- Length(col_range2) );fi;
if Length(col_range1)< Length(col_range2)  then A1:= AddEmptyColumnsToTheMatrix(A1, Length(col_range2)- Length(col_range1) );fi;

min:= Minimum(row_range1[1],row_range2[1]);
max:= Maximum(row_range1[Length(row_range1)],row_range2[Length(row_range2)]);

A1:= AddEmptyLinesToTheMatrix(A1,row_range1[1]-min,max- row_range1[Length(row_range1)]);
B1:= AddEmptyLinesToTheMatrix(B1,row_range2[1]-min,max- row_range2[Length(row_range2)]);
C1:=A1+B1;

row_range3:= [ min..max ];

if Length(col_range1)= Length(col_range2)  then col_range3:= col_range1 ;fi;
if Length(col_range1)> Length(col_range2)  then col_range3:= col_range1 ;fi;
if Length(col_range1)< Length(col_range2)  then col_range3:= col_range2 ;fi;

return HomalgBettiDiagram(C1, row_range3, col_range3, rec( string := "" ));

end );

# this program return the multiplication of a betti diagram with a rational numebr 
InstallMethod(\*, 
                [IsRat, IsBettiDiagram],

function(a, betti)
return HomalgBettiDiagram(a*betti!.matrix ,betti!.row_range, betti!.column_range, rec(string := ""));

end);


# this program return the multiplication of a betti diagram with a rational numebr 
InstallMethod(\*, 
                [IsBettiDiagram, IsRat],

function(betti, a)
return HomalgBettiDiagram(a*betti!.matrix ,betti!.row_range, betti!.column_range, rec(string := ""));

end );

# this program return the multiplication of an equation with a rational numebr.

InstallMethod(\*,
                [IsUpperEquationOfFacet, IsRat],

function(equation, b)
return UpperEquationOfFacet(b*equation!.MatrixWithCoefficientsOfTheUpperEquation, equation!.Grades);
end );
            
InstallMethod(\*,
                [IsRat, IsUpperEquationOfFacet],

function(b,equation)
return UpperEquationOfFacet(b*equation!.MatrixWithCoefficientsOfTheUpperEquation, equation!.Grades);
end );

InstallMethod(\*,
                [IsLowerEquationOfFacet, IsRat],

function(equation, b)
return LowerEquationOfFacet(b*equation!.MatrixWithCoefficientsOfTheLowerEquation, equation!.Grades);
end );
            
InstallMethod(\*,
                [IsRat, IsLowerEquationOfFacet],

function(b,equation)
return LowerEquationOfFacet(b*equation!.MatrixWithCoefficientsOfTheLowerEquation, equation!.Grades);
end );  

